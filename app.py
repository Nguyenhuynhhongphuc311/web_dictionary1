from flask import Flask, render_template, request, jsonify
import sqlite3
import re
import os
from threading import Lock

app = Flask(__name__)

# T√™n database c·ªßa b·∫°n
DB_NAME = "dictionary.db"

# Kh√≥a ƒë·ªÉ qu·∫£n l√Ω k·∫øt n·ªëi database, ƒë·∫£m b·∫£o an to√†n cho m√¥i tr∆∞·ªùng ƒëa lu·ªìng
db_lock = Lock()

# ======================
# üîπ K·∫æT N·ªêI DATABASE
# ======================
def get_connection():
    """T·∫°o k·∫øt n·ªëi database, ƒë·∫£m b·∫£o k·∫øt n·ªëi ch·ªâ ƒë·ªçc n·∫øu c√≥ th·ªÉ."""
    # Khi ch·∫°y tr√™n m√¥i tr∆∞·ªùng kh√¥ng cho ph√©p k·∫øt n·ªëi ƒëa lu·ªìng, c√≥ th·ªÉ d√πng check_same_thread=False
    return sqlite3.connect(DB_NAME, check_same_thread=False)

# ======================
# üîπ LOAD T·∫§T C·∫¢ T·ª™ V√ÄO B·ªò NH·ªö
# ======================
def load_all_words():
    """T·∫£i t·∫•t c·∫£ c√°c t·ª´ duy nh·∫•t v√†o b·ªô nh·ªõ (SET) ƒë·ªÉ d√πng cho autocomplete."""
    # Ki·ªÉm tra database t·ªìn t·∫°i tr∆∞·ªõc
    if not os.path.exists(DB_NAME):
        print(f"L·ªñI: Database '{DB_NAME}' kh√¥ng t√¨m th·∫•y. Autocomplete s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")
        return set()
    
    conn = get_connection()
    cursor = conn.cursor()
    # Ch·ªâ l·∫•y c√°c t·ª´ duy nh·∫•t
    cursor.execute("SELECT DISTINCT word FROM words")
    # L·∫•y set (t·∫≠p h·ª£p) c√°c t·ª´, chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ t√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
    words = set(r[0].lower() for r in cursor.fetchall())
    conn.close()
    print(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(words)} t·ª´ v√†o b·ªô nh·ªõ.")
    return words

all_words_set = load_all_words()
# Chuy·ªÉn set th√†nh list ƒë·ªÉ d·ªÖ d√†ng t√¨m ki·∫øm v·ªõi prefix
all_words_list = sorted(list(all_words_set))


# ======================
# üîπ G·ªòP D√íNG TR√ôNG
# ======================
def filter_unique_by_word(rows):
    """G·ªôp c√°c d√≤ng d·ªØ li·ªáu tr√πng t·ª´ (do c√≥ nhi·ªÅu nghƒ©a) th√†nh m·ªôt k·∫øt qu·∫£ duy nh·∫•t."""
    result_dict = {}
    for row in rows:
        word = row[0]
        if word not in result_dict:
            result_dict[word] = list(row)
        else:
            # G·ªôp synonym
            if len(row) > 9 and row[9]:
                old_syn = result_dict[word][9] or ""
                if row[9] not in old_syn:
                    result_dict[word][9] = (old_syn + ", " + row[9]).strip(", ")
            # G·ªôp antonym
            if len(row) > 10 and row[10]:
                old_ant = result_dict[word][10] or ""
                if row[10] not in old_ant:
                    result_dict[word][10] = (old_ant + ", " + row[10]).strip(", ")
    return list(result_dict.values())

# ======================
# üîπ H√ÄM X·ª¨ L√ù CHU·ªñI
# ======================

# H√†m n√†y highlight d·∫•u nh·∫•n trong phi√™n √¢m (ƒê∆∞·ª£c ph·ª•c h·ªìi)
def highlight_stress_mark(pronunciation):
    if not pronunciation:
        return ""
    # D·∫•u nh·∫•n ch√≠nh (Àà)
    return re.sub(r'Àà', r'<span class="stress-mark">Àà</span>', pronunciation)


# H√†m n√†y b·ªçc t·ª´ kh√≥a t√¨m ki·∫øm trong k·∫øt qu·∫£ (v√≠ d·ª•, highlight t·ª´ t√¨m ki·∫øm)
def highlight_keyword(text, keyword):
    """T√¥ s√°ng t·ª´ kh√≥a t√¨m ki·∫øm trong k·∫øt qu·∫£."""
    if not keyword or not text:
        return text
    
    # 1. T√°ch chu·ªói th√†nh c√°c ph·∫ßn: TEXT v√† HTML TAGS
    # Regex n√†y t√¨m t·∫•t c·∫£ c√°c th·∫ª HTML (nh∆∞ <a href="..."></a>)
    parts = re.split(r'(<[^>]+>|&nbsp;)', text)
    
    highlighted_text = []
    
    # 2. Ch·ªâ highlight c√°c ph·∫ßn l√† TEXT
    pattern = re.compile(re.escape(keyword), re.IGNORECASE)
    
    for part in parts:
        if not part:
            continue
            
        # Ki·ªÉm tra n·∫øu ph·∫ßn n√†y l√† m·ªôt th·∫ª HTML ho·∫∑c kho·∫£ng tr·∫Øng ƒë·∫∑c bi·ªát (&nbsp;)
        if part.startswith('<') and part.endswith('>') or part == '&nbsp;':
            highlighted_text.append(part) # Gi·ªØ nguy√™n th·∫ª HTML
        else:
            # Ch·ªâ thay th·∫ø trong ph·∫ßn text
            # Thay th·∫ø keyword b·∫±ng <mark>keyword</mark>
            highlighted_text.append(pattern.sub(lambda m: f"<mark style='background-color:#fff3cd; color:inherit;'>{m.group(0)}</mark>", part))
            
    return "".join(highlighted_text)


# ======================
# üîπ TOKENIZER & LINK C√ÇU V√ç D·ª§ (ƒê√£ s·ª≠a ƒë·ªÉ t√¥ ƒë·∫≠m t·ª´ ƒë√£ bi·∫øt)
# ======================
def link_words_in_example(text):
    """T·∫°o li√™n k·∫øt cho m·ªói t·ª´ trong c√¢u v√≠ d·ª• v√† t√¥ ƒë·∫≠m t·ª´ c√≥ trong t·ª´ ƒëi·ªÉn."""
    if not text:
        return ""
    # Bi·ªÉu th·ª©c ch√≠nh quy: (\W+) t√°ch c√°c t·ª´ b·∫±ng c√°c k√Ω t·ª± kh√¥ng ph·∫£i t·ª´ (d·∫•u c√¢u, kho·∫£ng tr·∫Øng)
    words = re.split(r'(\W+)', text) 
    result = ""
    for w in words:
        # Ch·ªâ t·∫°o link v·ªõi t·ª´ ti·∫øng Anh V√Ä c√≥ trong t·ª´ ƒëi·ªÉn
        if re.match(r'^[A-Za-z]+$', w) and w.lower() in all_words_set:
            # Th√™m class 'known-word' ƒë·ªÉ CSS t√¥ ƒë·∫≠m v√† lo·∫°i b·ªè style inline c≈©
            css_class = 'known-word'
            result += f'<a href="/?word={w.lower()}" class="{css_class}">{w}</a>'
        else:
            result += w
    return result


# ======================
# üîπ TRANG CH√çNH
# ======================
@app.route("/", methods=["GET", "POST"])
def index():
    results = []
    search_word = ""

    search_word = request.args.get("word", "").strip() or request.form.get("word", "").strip()

    if search_word:
        conn = get_connection()
        cursor = conn.cursor()
        
        # 1. T√åM CH√çNH X√ÅC (∆Øu ti√™n)
        cursor.execute("""
            SELECT word, pronunciation, type, v2, v3, ing, ed, meaning, example, synonym, antonym
            FROM words
            WHERE word = ? COLLATE NOCASE
        """, (search_word,))
        rows = cursor.fetchall()

        if not rows:
            # 2. T√åM G·∫¶N ƒê√öNG (N·∫øu t√¨m ch√≠nh x√°c kh√¥ng c√≥) - Gi·ªõi h·∫°n 10 t·ª´
            cursor.execute("""
                SELECT word, pronunciation, type, v2, v3, ing, ed, meaning, example, synonym, antonym
                FROM words
                WHERE word LIKE ? COLLATE NOCASE LIMIT 10
            """, (search_word + "%",))
            rows = cursor.fetchall()
        
        results = filter_unique_by_word(rows)

        # x·ª≠ l√Ω link + highlight
        for r in results:
            r[1] = highlight_stress_mark(r[1]) # pronunciation (√Åp d·ª•ng highlight d·∫•u nh·∫•n)

            if r[7]: # meaning
                r[7] = highlight_keyword(r[7], search_word)
            if r[8]: # example
                # Quan tr·ªçng: Link tr∆∞·ªõc, sau ƒë√≥ Highlight.
                r[8] = link_words_in_example(r[8])
                # Highlight ƒë∆∞·ª£c g·ªçi sau link, nh∆∞ng gi·ªù h√†m highlight ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ b·ªè qua th·∫ª <a>
                r[8] = highlight_keyword(r[8], search_word)
            
            # √Åp d·ª•ng highlight cho Synonym v√† Antonym
            if r[9]: # synonym
                r[9] = highlight_keyword(r[9], search_word)
            if r[10]: # antonym
                r[10] = highlight_keyword(r[10], search_word)


        conn.close()

    return render_template("index.html", results=results, search_word=search_word)

# ======================
# üîπ G·ª¢I √ù T·ª∞ ƒê·ªòNG (S·ª≠ d·ª•ng d·ªØ li·ªáu trong b·ªô nh·ªõ)
# ======================
@app.route("/autocomplete")
def autocomplete():
    term = request.args.get("term", "").strip().lower()
    suggestions = []
    
    if term:
        # L·ªçc danh s√°ch t·ª´ ƒë√£ ƒë∆∞·ª£c t·∫£i v√†o b·ªô nh·ªõ (r·∫•t nhanh)
        suggestions = [word for word in all_words_list if word.startswith(term)]
        
        # ƒê·∫£m b·∫£o k·∫øt qu·∫£ l√† duy nh·∫•t v√† gi·ªõi h·∫°n 10 (kh·∫Øc ph·ª•c l·ªói l·∫∑p t·ª´)
        unique_suggestions = sorted(list(set(suggestions)))[:10]
        suggestions = unique_suggestions

    # Tr·∫£ v·ªÅ c√°c t·ª´ duy nh·∫•t, kh·∫Øc ph·ª•c l·ªói l·∫∑p t·ª´ trong autocomplete
    return jsonify(suggestions)

# ======================
# üîπ CH·∫†Y APP
# ======================
if __name__ == "__main__":
    # ƒê·∫£m b·∫£o database t·ªìn t·∫°i tr∆∞·ªõc khi ch·∫°y
    if not os.path.exists(DB_NAME):
        print("C·∫¢NH B√ÅO: Database 'dictionary.db' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng t·∫°o file n√†y v√† b·∫£ng 'words'.")
    app.run(debug=True)
